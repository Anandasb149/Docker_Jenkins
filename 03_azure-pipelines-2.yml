# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master

variables:
  buildConfiguration: 'Release'
  location: 'West US 2'
  acrHostName: 'cswebappdocker004acr.azurecr.io'
  acrName: 'cswebappdocker004acr'
  rgName: 'cswebappdocker004-rg'
  imageName: 'cswebappdocker004'
  webAppName: 'cswebappdocker004'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: buildd
    displayName: Buildd
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: AzureResourceGroupDeployment@2 
      displayName: 'Azure Deployment:Create Azure Container Registry'
      inputs:
        azureSubscription: 'AzureSC'
        resourceGroupName: '$(rgName)'
        location: $(location)
        csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
        overrideParameters: '-registryName "$(acrName)" -registryLocation "$(location)" -registrySku standard'

    
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'AnandHub'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    
      # Push container image
    - task: Docker@1
      displayName: 'Push container image'
      inputs:
        azureSubscriptionEndpoint: 'AzureSC'
        azureContainerRegistry: '$(acrHostName)'
        command: 'Push an image'
        imageName: '$(imageName):$(Build.BuildId)'
    
     # Copy ARM templates
    - task: CopyFiles@2
      displayName: 'Copy ARM templates'
      inputs:
        SourceFolder: ArmTemplates
        TargetFolder: '$(build.artifactstagingdirectory)'

    # Publish the app as an artifact
    - publish: $(Build.StagingDirectory)
      artifact: app
